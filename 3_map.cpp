#include <iostream>
#include <string>
#include <map>
//про итераторы
int main()
{
    std::pair<std::string, int> ourPair("Hello", 5); // создали т.н. пару, которую обозвали ourPair. В ней ключ - строка, а значение - int
    
    std::map<std::string, int> ourMap;               // создали мапу, в которой ключи - строки, а значения - целые числа

    ourMap.insert(ourPair); // через метод insert засунули в мапу нашу пару

    ourMap.insert(std::pair<std::string, int>("world", 8));

    ourMap.insert(std::make_pair<std::string, int>("banana", 9));

    //при поиске по мапе иногда надо получить не только значение по ключу, но и всю пару. тут поможет итератор 
    // теперь про итератор. Это - специальный объект std::map
    // итератором контейнера называется указатель на его конкретный элемент, одиночный(как в векторе) или пара (в мапе)
    // итератор дает возможность доступа к конкретному элементу!
    
    // для начала найдем объект ПО КЛЮЧУ и запишем в итератор
    // для поиска объекта в мпае используется метод find, в который мы передаем ключ, по которому ищем пару
    // этот метод и возвращает нам итератор!

    std::map<std::string, int>::iterator it = ourMap.find("Hello");  // итератор является внутренним классом структуры std::map.
    std::map<std::string, int>::iterator it1 = ourMap.find("banana");

    // итератор является указателем на пару, поэтому к нему можно применять методы first и second

    std::cout << it ->first << " " << it ->second << "\n"; // оператор -> разыменовывает указатель и дает доступ к его элементам
    std::cout << it1->first << " " << it1->second << "\n";
}